server:
  port: 8081
spring:
  application:
    name: mod-inn-reach
  datasource:
    # to boot up application despite of any DB connection issues
    continue-on-error: true
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:db}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL10Dialect
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL10Dialect
        format_sql: true
    show-sql: true
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/changelog-master.xml
  jackson:
    default-property-inclusion: non_null
    deserialization:
      fail-on-unknown-properties: false
      accept-single-value-as-array: true
  mustache:
    check-template-location: false
  cache:
    type: caffeine
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
    consumer:
      max-poll-records: 50
      group-id: ${ENV:folio}-mod-innreach-events-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
            use:
              type:
                headers: false
            value:
              default:
                type: org.folio.innreach.domain.dto.folio.inventorystorage.InstanceIterationEvent
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      key-store-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
      key-store-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
      trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
      trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
  batch:
    job:
      enabled: false
    initializer:
      enabled: false
    enable-auto-commit: true
folio:
  tenant:
    validation:
      enabled: true
management:
  endpoints:
    web:
      exposure:
        include: info,health,env,httptrace
      base-path: /admin
  #  endpoint:
  #    health:
  #      show-details: always
  #      show-components: always
  ###################################################
  # Disable all checks except for readiness
  ###################################################
  health:
    defaults:
      enabled: false
    readinessstate:
      enabled: true
debug: false
inn-reach:
  jwt-access-token:
    cache:
      ttl: 500
      max-size: 100
system-user:
  username: mod-innreach
  password: ${SYSTEM_USER_PASSWORD:Mod-innreach-1-0-0}
  lastname: System
  permissionsFilePath: permissions/mod-innreach.csv
test-tenant:
  tenantname: test_inn_reach_integration
###################################################
# Caffeine cache configuration
###################################################
coffee-boots:
  cache:
    basic-spec: maximumSize=500,expireAfterAccess=1h
    spec:
      system-user-cache: maximumSize=5
      users-by-id: maximumSize=100,expireAfterAccess=3h
      users-by-name: maximumSize=10,expireAfterAccess=3h
batch:
  jobs:
    contribution:
      chunk-size: 100
      retry-attempts: 3
      retry-interval-ms: 20000
      reader-topic: inventory.instance-contribution
      reader-group-id: ${ENV:folio}-mod-innreach-contribution-events-group
      reader-poll-timeout-sec: 30
reference-data:
  loader:
    retry-attempts: 10
    retry-interval-ms: 20000
retryable-update:
  on-conflict:
    retry-attempts: 2
    retry-interval-ms: 0
okapi.url: ${OKAPI_URL:http://okapi:9130}
environment: ${ENV:folio}
kafka:
  listener:
    loan:
      id: ${environment}-mod-inn-reach-circ-loans
      group-id: ${spring.kafka.consumer.group-id}
      topic-pattern: (${environment}\.)(.*\.)circulation\.loan
      concurrency: ${KAFKA_EVENTS_CONCURRENCY:2}
      data-type: org.folio.innreach.dto.LoanDTO
    request:
      id: ${environment}-mod-inn-reach-circ-requests
      group-id: ${spring.kafka.consumer.group-id}
      topic-pattern: (${environment}\.)(.*\.)circulation\.request
      concurrency: ${KAFKA_EVENTS_CONCURRENCY:2}
      data-type: org.folio.innreach.domain.dto.folio.circulation.RequestDTO
    check-in:
      id: ${environment}-mod-inn-reach-circ-checkins
      group-id: ${spring.kafka.consumer.group-id}
      topic-pattern: (${environment}\.)(.*\.)circulation\.check-in
      concurrency: ${KAFKA_EVENTS_CONCURRENCY:2}
      data-type: org.folio.innreach.dto.CheckInDTO
